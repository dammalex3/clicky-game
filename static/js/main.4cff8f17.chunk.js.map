{"version":3,"sources":["Components/GameCard/GameCard.js","Components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["GameCard","props","react_default","a","createElement","className","onClick","handleClick","alt","name","src","image","Header","App","state","cards","id","shuffle","i","length","j","Math","floor","random","_ref","alert","_this2","this","Header_Header","map","card","GameCard_GameCard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSAeeA,MAVf,SAAkBC,GAChB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAAA,OAAKE,QAAS,kBAAML,EAAMM,eAAeF,UAAU,aAAaG,IAAKP,EAAMQ,KAAMC,IAAKT,EAAMU,iBCErFC,MARf,WACE,OACEV,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,2BCgFSS,oNA/EbC,MAAQ,CACNC,MAAO,CACL,CACEC,GAAM,EACNP,KAAQ,SACRE,MAAS,iIAEX,CACEK,GAAM,EACNP,KAAQ,SACRE,MAAS,4EAEX,CACEK,GAAM,EACNP,KAAQ,SACRE,MAAS,iHAEX,CACEK,GAAM,EACNP,KAAQ,SACRE,MAAS,0EAEX,CACEK,GAAM,EACNP,KAAQ,SACRE,MAAS,uKAEX,CACEK,GAAM,EACNP,KAAQ,SACRE,MAAS,2EAEX,CACEK,GAAM,EACNP,KAAQ,SACRE,MAAS,kEAEX,CACEK,GAAM,EACNP,KAAQ,SACRE,MAAS,2NAEX,CACEK,GAAM,EACNP,KAAQ,SACRE,MAAS,+FAKfM,QAAU,SAAAd,GACR,IAAK,IAAIe,EAAIf,EAAEgB,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACnC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADPM,EAEpB,CAACrB,EAAEiB,GAAIjB,EAAEe,IAAvBf,EAAEe,GAFgCM,EAAA,GAE5BrB,EAAEiB,GAF0BI,EAAA,GAIvC,OAAOrB,KAGTI,YAAc,WACZkB,MAAM,wFAGC,IAAAC,EAAAC,KACP,OACEzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACwB,EAAD,MACCD,KAAKV,QAAQU,KAAKb,MAAMC,OAAOc,IAAI,SAAAC,GAAI,OACtC5B,EAAAC,EAAAC,cAAC2B,EAAD,CACEf,GAAIc,EAAKd,GACTL,MAAOmB,EAAKnB,MACZF,KAAMqB,EAAKnB,MACXJ,YAAamB,EAAKnB,wBAzEZyB,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4cff8f17.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./gameCardStyle.css\";\n\n\n\nfunction GameCard(props) {\n  return (\n    <div className=\"container\">\n      <div className=\"card-container col-md-12\">\n        <img onClick={() => props.handleClick()} className=\"card-image\" alt={props.name} src={props.image} />\n      </div>\n    </div>\n  );\n}\n\nexport default GameCard;\n","import React from \"react\";\nimport \"./header.css\";\n\nfunction Header() {\n  return (\n    <header className=\"header\">\n      <h1>Clicky Game</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport GameCard from \"./Components/GameCard/GameCard\";\nimport Header from \"./Components/Header/Header\";\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    cards: [\n      {\n        \"id\": 1,\n        \"name\": \"hammer\",\n        \"image\": \"https://www.woodblocx.co.uk/media/catalog/product/cache/1/thumbnail/960x/05e17a266b0e9cc26fb81a2e0bed7e78/l/u/lump-hammer.jpg\",\n      },\n      {\n        \"id\": 2,\n        \"name\": \"hammer\",\n        \"image\": \"https://images-na.ssl-images-amazon.com/images/I/61fnMMgkGIL._SX425_.jpg\",\n      },\n      {\n        \"id\": 3,\n        \"name\": \"hammer\",\n        \"image\": \"https://i5.walmartimages.com/asr/5ec60309-22a2-454f-a632-35d7d0d55ffc_1.2a918275def7979179f7f3b85a4f1209.jpeg\",\n      },\n      {\n        \"id\": 4,\n        \"name\": \"hammer\",\n        \"image\": \"https://d2kx81irxb72bi.cloudfront.net/cs/products/38/73/08/550x550.jpg\",\n      },\n      {\n        \"id\": 5,\n        \"name\": \"hammer\",\n        \"image\": \"https://ae01.alicdn.com/kf/HTB1FjN5KFXXXXa6XFXXq6xXFXXXx/1-1-Scale-Full-Metal-Thor-Hammer-Mjolnir-1-1-Replica-Thor-Custom-Cosplay-Hammer-Collection.jpg_640x640.jpg\",\n      },\n      {\n        \"id\": 6,\n        \"name\": \"hammer\",\n        \"image\": \"https://www.harborfreight.com/media/catalog/product/i/m/image_20800.jpg\",\n      },\n      {\n        \"id\": 7,\n        \"name\": \"hammer\",\n        \"image\": \"https://www.wind-lock.com/product/image/medium/w-go05164_1.jpg\",\n      },\n      {\n        \"id\": 8,\n        \"name\": \"hammer\",\n        \"image\": \"http://www2.fiskars.com/var/fiskars_amer/storage/images/frontpage2/products/home-improvement-tools/hammers/isocore-22-oz-milled-face-framing-hammer-16/942701-20-eng-US/IsoCore-22-oz-Milled-face-Framing-Hammer-16.jpg\",\n      },\n      {\n        \"id\": 9,\n        \"name\": \"hammer\",\n        \"image\": \"https://cdn.shopify.com/s/files/1/0248/6216/products/hardcore-hammer-7.jpg?v=1537308705\",\n      }\n    ]\n  };\n\n  shuffle = a => {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  }\n\n  handleClick = () => {\n    alert(\"you clicked\");\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        {this.shuffle(this.state.cards).map(card => (\n          <GameCard\n            id={card.id}\n            image={card.image}\n            name={card.image}\n            handleClick={this.handleClick}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}